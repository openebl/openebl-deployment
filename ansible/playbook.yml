---
- name: Get unique hosts
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Initialize unique hostnames list
      set_fact:
        unique_hostnames: []
    - name: Check ansible_host uniqueness
      set_fact:
        unique_hostnames: "{{ unique_hostnames + [item] }}"
      loop: "{{ groups['all'] }}"
      when: item not in unique_hostnames and hostvars[item].ansible_host not in unique_hostnames | map('extract', hostvars, 'ansible_host') | select('defined') | list
    - name: Save unique_hostnames to a file
      copy:
        content: "{unique_hostnames: {{ unique_hostnames | to_json }}}"
        dest: /tmp/unique_hostnames.json

- name: Init the docker environment for all hosts
  hosts: all
  become: true
  gather_facts: true
  vars_files:
    - /tmp/unique_hostnames.json
  tasks:
    - name: Install Docker env
      include_role:
        name: docker
      when: inventory_hostname is in unique_hostnames

    - name: Create docker network
      community.docker.docker_network:
        name: openebl
        state: present
        driver: bridge
      when: inventory_hostname is in unique_hostnames

- name: Deploy PostgreSQL Server
  hosts: database_server
  become: true
  gather_facts: true
  roles:
    - role: psql-server

- name: Deploy Monitoring Stack
  hosts: monitoring
  become: true
  gather_facts: true
  roles:
    - role: monitoring

- name: Deploy OpenEBL Relay Server
  hosts: openebl_relay_server
  become: true
  gather_facts: true
  roles:
    - role: openebl_relay_server

- name: Deploy OpenEBL BU Server Broker
  hosts: openebl_bu_server_broker
  become: true
  gather_facts: true
  roles:
    - role: openebl_bu_server_broker

- name: Deploy OpenEBL BU Server
  hosts: openebl_bu_server
  become: true
  gather_facts: true
  roles:
    - role: openebl_bu_server

- name: Deploy OpenEBL Cert Server
  hosts: openebl_cert_server
  become: true
  gather_facts: true
  roles:
    - role: openebl_cert_server

- name: Remove unused Docker images and volumes
  hosts: all
  become: true
  gather_facts: true
  vars_files:
    - /tmp/unique_hostnames.json
  tasks:
    - name: Remove unused Docker images
      ansible.builtin.command:
        cmd: docker image prune -af
      when: inventory_hostname is in unique_hostnames

    - name: Remove unused Docker volumes
      ansible.builtin.command:
        cmd: docker volume prune -f
      when: inventory_hostname is in unique_hostnames
